// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: primes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrimesService_Primes_FullMethodName = "/greet.PrimesService/Primes"
)

// PrimesServiceClient is the client API for PrimesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimesServiceClient interface {
	Primes(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimesResponse], error)
}

type primesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimesServiceClient(cc grpc.ClientConnInterface) PrimesServiceClient {
	return &primesServiceClient{cc}
}

func (c *primesServiceClient) Primes(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PrimesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PrimesService_ServiceDesc.Streams[0], PrimesService_Primes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumRequest, PrimesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrimesService_PrimesClient = grpc.ServerStreamingClient[PrimesResponse]

// PrimesServiceServer is the server API for PrimesService service.
// All implementations must embed UnimplementedPrimesServiceServer
// for forward compatibility.
type PrimesServiceServer interface {
	Primes(*NumRequest, grpc.ServerStreamingServer[PrimesResponse]) error
	mustEmbedUnimplementedPrimesServiceServer()
}

// UnimplementedPrimesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrimesServiceServer struct{}

func (UnimplementedPrimesServiceServer) Primes(*NumRequest, grpc.ServerStreamingServer[PrimesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Primes not implemented")
}
func (UnimplementedPrimesServiceServer) mustEmbedUnimplementedPrimesServiceServer() {}
func (UnimplementedPrimesServiceServer) testEmbeddedByValue()                       {}

// UnsafePrimesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimesServiceServer will
// result in compilation errors.
type UnsafePrimesServiceServer interface {
	mustEmbedUnimplementedPrimesServiceServer()
}

func RegisterPrimesServiceServer(s grpc.ServiceRegistrar, srv PrimesServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrimesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrimesService_ServiceDesc, srv)
}

func _PrimesService_Primes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimesServiceServer).Primes(m, &grpc.GenericServerStream[NumRequest, PrimesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PrimesService_PrimesServer = grpc.ServerStreamingServer[PrimesResponse]

// PrimesService_ServiceDesc is the grpc.ServiceDesc for PrimesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.PrimesService",
	HandlerType: (*PrimesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Primes",
			Handler:       _PrimesService_Primes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "primes.proto",
}
