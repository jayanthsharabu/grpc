// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: avg.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AvgService_AvgCal_FullMethodName = "/avg.AvgService/AvgCal"
)

// AvgServiceClient is the client API for AvgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvgServiceClient interface {
	AvgCal(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NumsRequest, AvgResponse], error)
}

type avgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvgServiceClient(cc grpc.ClientConnInterface) AvgServiceClient {
	return &avgServiceClient{cc}
}

func (c *avgServiceClient) AvgCal(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NumsRequest, AvgResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AvgService_ServiceDesc.Streams[0], AvgService_AvgCal_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumsRequest, AvgResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvgService_AvgCalClient = grpc.ClientStreamingClient[NumsRequest, AvgResponse]

// AvgServiceServer is the server API for AvgService service.
// All implementations must embed UnimplementedAvgServiceServer
// for forward compatibility.
type AvgServiceServer interface {
	AvgCal(grpc.ClientStreamingServer[NumsRequest, AvgResponse]) error
	mustEmbedUnimplementedAvgServiceServer()
}

// UnimplementedAvgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAvgServiceServer struct{}

func (UnimplementedAvgServiceServer) AvgCal(grpc.ClientStreamingServer[NumsRequest, AvgResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AvgCal not implemented")
}
func (UnimplementedAvgServiceServer) mustEmbedUnimplementedAvgServiceServer() {}
func (UnimplementedAvgServiceServer) testEmbeddedByValue()                    {}

// UnsafeAvgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvgServiceServer will
// result in compilation errors.
type UnsafeAvgServiceServer interface {
	mustEmbedUnimplementedAvgServiceServer()
}

func RegisterAvgServiceServer(s grpc.ServiceRegistrar, srv AvgServiceServer) {
	// If the following call pancis, it indicates UnimplementedAvgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AvgService_ServiceDesc, srv)
}

func _AvgService_AvgCal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServiceServer).AvgCal(&grpc.GenericServerStream[NumsRequest, AvgResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvgService_AvgCalServer = grpc.ClientStreamingServer[NumsRequest, AvgResponse]

// AvgService_ServiceDesc is the grpc.ServiceDesc for AvgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avg.AvgService",
	HandlerType: (*AvgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AvgCal",
			Handler:       _AvgService_AvgCal_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "avg.proto",
}
